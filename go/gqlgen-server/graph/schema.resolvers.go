package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"gqlgenserver/graph/model"
)

// RegisterZoo is the resolver for the registerZoo field.
func (r *mutationResolver) RegisterZoo(ctx context.Context, zoo model.ZooInput) ([]*model.Zoo, error) {
	newZoo := &model.Zoo{
		Name:    zoo.Name,
		Area:    zoo.Area,
		Animals: make([]*model.Animal, len(zoo.Animals)),
	}
	for i, animal := range zoo.Animals {
		newZoo.Animals[i] = &model.Animal{
			Name:    animal.Name,
			Classis: &model.Classis{Name: animal.Classis.Name},
		}
	}
	r.zoos = append(r.zoos, newZoo)
	return r.zoos, nil
}

// Zoos is the resolver for the zoos field.
func (r *queryResolver) Zoos(ctx context.Context) ([]*model.Zoo, error) {
	return r.zoos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
